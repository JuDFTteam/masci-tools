[build-system]
requires = ["setuptools", "wheel"]

[tool.poetry]
name = "masci_tools"
version = "0.6.2"
description = "Tools for Materials science. Vis contains wrapers of matplotlib functionality to visualalize common material science data. Plus wrapers of visualisation for aiida-fleur workflow nodes"
readme = "README.md"
authors = ["Jens Bröder <j.broeder@fz-juelich.de>",
           "Philipp Rüssmann <p.ruessmann@fz-juelich.de>",
          ]
license = "MIT"
homepage = "https://github.com/JuDFTteam/masci-tools"
repository = "https://github.com/JuDFTteam/masci-tools"
documentation = "https://masci-tools.readthedocs.io"
keywords = ["material science",
            "plots",
            "visualization",
            "aiida",
            "dft"]
classifiers = ["Development Status :: 4 - Beta",
               "Intended Audience :: Science/Research",
               "License :: OSI Approved :: MIT License",
               "Programming Language :: Python :: 3",
               "Programming Language :: Python :: 3.7",
               "Programming Language :: Python :: 3.8",
               "Programming Language :: Python :: 3.9",
               "Topic :: Scientific/Engineering :: Physics"]

[tool.poetry.dependencies]
python = "^3.7"
numpy = "*"
scipy = "*"
matplotlib = "*"
h5py = "*"
pandas = "*"
lxml = "^3.6.4"
more_itertools = "*"
bump2version = "*"
pytest = "^4.3.1"
pytest-cov = "*"
pytest-mpl = "*"
future = "*"
seaborn = "*"
deepdiff = "*"
humanfriendly = "*"
mendeleev = "*"

[tool.mypy]
warn_unused_ignores=true
warn_redundant_casts=true

[tool.yapf]
based_on_style = "google"
column_limit = 120
coalesce_brackets = true
align_closing_bracket_with_visual_indent = true
split_arguments_when_comma_terminated = true
indent_dictionary_value = false

[tool.pylint.format]
max-line-length = 120

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-public-methods",
    "bad-continuation",
    "wrong-import-position",
    "line-too-long",
    "locally-disabled",
    "wildcard-import",
    "locally-enabled",
    "too-many-instance-attributes",
    "fixme",
    "len-as-condition",
    "useless-object-inheritance",
    "wrong-import-order",
    "import-outside-toplevel", 
    "duplicate-code",
    "unnecessary-pass", 
    "no-else-raise",
    "no-else-return",
    "protected-access",
    "no-member",
    "invalid-name",
    "unused-variable",
    "unused-argument",
    "unused-import",
    "missing-function-docstring",
    "too-many-locals",
    "too-many-branches",
    "inconsistent-return-statements",
    "no-self-use",
    "c-extension-no-member",
    "too-many-statements",
    "too-many-nested-blocks",
    "too-many-lines",
    "too-many-return-statements",
    "too-many-arguments",
    "pointless-string-statement",
]

[tool.pylint.basic]
good-names = [
    "_",
    "x",
    "y",
    "z",
    "i",
    "j",
    "k",
]
no-docstring-rgx = "^_"
docstring-min-length = 5

[tool.pylint.design]
max-locals = 20

[tool.pylint.classes]
exclude-protected= ["_asdict","_fields","_replace","_source","_make"]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
cov-report="xml"
mpl-generate-summary="html"
mpl-results-path="tests/mpl-results"
mpl=true